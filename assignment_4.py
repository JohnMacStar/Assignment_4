# -*- coding: utf-8 -*-
"""Assignment 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pvXr0OTgK9gyte3dvhBEDFESl2iuFQFG
"""

import pandas as pd
from IPython.core.pylabtools import figsize
import numpy as np
from matplotlib import pyplot as plt
import pymc as pm
import numpy as np
import seaborn as sns
import scipy.stats as stats

data = pd.read_csv("https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/cookie_cats.csv")

data['retention_1'] = data['retention_1'].replace({True: 1, False: 0})
data['retention_7'] = data['retention_7'].replace({True: 1, False: 0})
data

gate_30_count = sum(data['version'] == 'gate_30')
gate_40_count = sum(data['version'] == 'gate_40')

gate_30 = data[data['version'] == 'gate_30']['retention_1'].values.astype(int)
gate_40 = data[data['version'] == 'gate_40']['retention_1'].values.astype(int)

print(f"The number of people in gate 30 are: {gate_30_count} \nThe number of people in gate 40 are: {gate_40_count}")

true_p_A = len(data.loc[(data['retention_1'] == 1) & (data['version'] == 'gate_30')])/gate_30_count
true_p_B = len(data.loc[(data['retention_1'] == 1) & (data['version'] == 'gate_40')])/gate_40_count

observations_A = data[data['version'] == 'gate_30']['retention_1']
observations_B = data[data['version'] == 'gate_40']['retention_1']

print(np.mean(data[data['version'] == 'gate_30']['retention_1']))
print(np.mean(data[data['version'] == 'gate_40']['retention_1']))

with pm.Model() as model:
    p_A = pm.Uniform("p_A", 0, 1)
    p_B = pm.Uniform("p_B", 0, 1)

    # Define the deterministic delta function. This is our unknown of interest.
    delta = pm.Deterministic("delta", p_A - p_B)


    # Set of observations, in this case we have two observation datasets.
    obs_A = pm.Bernoulli("obs_A", p_A, observed=observations_A)
    obs_B = pm.Bernoulli("obs_B", p_B, observed=observations_B)

    # To be explained in chapter 3.
    step = pm.Metropolis()
    trace = pm.sample(20000, step=step,chains=2)

p_A_samples =  np.concatenate(trace.posterior.p_A.data[:,1000:])
p_B_samples =  np.concatenate(trace.posterior.p_B.data[:,1000:])
delta_samples = np.concatenate(trace.posterior.delta.data[:,1000:])

figsize(12.5,10)

#histogram of posteriors

ax = plt.subplot(311)

plt.xlim(0.42, .46)
plt.hist(p_A_samples, histtype='stepfilled', bins=25, alpha=0.85,
         label="posterior of $p_A$", color="#A60628", density=True)
plt.vlines(true_p_A, 0, 80, linestyle="--", label="true $p_A$ (unknown)")
plt.legend(loc="upper right")
plt.title("Posterior distributions of $p_A$, $p_B$, and delta unknowns")

ax = plt.subplot(312)

plt.xlim(0.42, .46)
plt.hist(p_B_samples, histtype='stepfilled', bins=25, alpha=0.85,
         label="posterior of $p_B$", color="#467821", density=True)
plt.vlines(true_p_B, 0, 80, linestyle="--", label="true $p_B$ (unknown)")
plt.legend(loc="upper right")

ax = plt.subplot(313)
plt.hist(delta_samples, histtype='stepfilled', bins=30, alpha=0.85,
         label="posterior of delta", color="#7A68A6", density=True)
plt.vlines(true_p_A - true_p_B, 0, 60, linestyle="--",
          label="true delta (unknown)")
plt.vlines(0, 0, 60, color="black", alpha=0.2)
plt.legend(loc="upper right");

print("Probability site A is WORSE than site B: %.3f" % \
    np.mean(delta_samples < 0))

print("Probability site A is BETTER than site B: %.3f" % \
    np.mean(delta_samples > 0))

true_p_A = len(data.loc[(data['retention_7'] == 1) & (data['version'] == 'gate_30')])/gate_30_count
true_p_B = len(data.loc[(data['retention_7'] == 1) & (data['version'] == 'gate_40')])/gate_40_count

observations_A = data[data['version'] == 'gate_30']['retention_7']
observations_B = data[data['version'] == 'gate_40']['retention_7']

print(np.mean(data[data['version'] == 'gate_30']['retention_7']))
print(np.mean(data[data['version'] == 'gate_40']['retention_7']))

with pm.Model() as model:
    p_A = pm.Uniform("p_A", 0, 1)
    p_B = pm.Uniform("p_B", 0, 1)

    # Define the deterministic delta function. This is our unknown of interest.
    delta = pm.Deterministic("delta", p_A - p_B)


    # Set of observations, in this case we have two observation datasets.
    obs_A = pm.Bernoulli("obs_A", p_A, observed=observations_A)
    obs_B = pm.Bernoulli("obs_B", p_B, observed=observations_B)

    # To be explained in chapter 3.
    step = pm.Metropolis()
    trace = pm.sample(20000, step=step,chains=2)

p_A_samples =  np.concatenate(trace.posterior.p_A.data[:,1000:])
p_B_samples =  np.concatenate(trace.posterior.p_B.data[:,1000:])
delta_samples = np.concatenate(trace.posterior.delta.data[:,1000:])

figsize(12.5,10)

#histogram of posteriors

ax = plt.subplot(311)

plt.xlim(0.15, .2)
plt.hist(p_A_samples, histtype='stepfilled', bins=25, alpha=0.85,
         label="posterior of $p_A$", color="#A60628", density=True)
plt.vlines(true_p_A, 0, 80, linestyle="--", label="true $p_A$ (unknown)")
plt.legend(loc="upper right")
plt.title("Posterior distributions of $p_A$, $p_B$, and delta unknowns")

ax = plt.subplot(312)

plt.xlim(0.17, .2)
plt.hist(p_B_samples, histtype='stepfilled', bins=25, alpha=0.85,
         label="posterior of $p_B$", color="#467821", density=True)
plt.vlines(true_p_B, 0, 80, linestyle="--", label="true $p_B$ (unknown)")
plt.legend(loc="upper right")

ax = plt.subplot(313)
plt.hist(delta_samples, histtype='stepfilled', bins=30, alpha=0.85,
         label="posterior of delta", color="#7A68A6", density=True)
plt.vlines(true_p_A - true_p_B, 0, 60, linestyle="--",
          label="true delta (unknown)")
plt.vlines(0, 0, 60, color="black", alpha=0.2)
plt.legend(loc="upper right");

print("Probability site A is WORSE than site B: %.3f" % \
    np.mean(delta_samples < 0))

print("Probability site A is BETTER than site B: %.3f" % \
    np.mean(delta_samples > 0))